{"ast":null,"code":"/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean).reduce((classes, [className, value]) => classes.concat(value ? className : undefined), []).filter(className => className !== undefined).join(\" \");\n}\n/**\n * Formats a number of minutes as 'mm:00'.\n *\n * For example,\n *    minutesToDuration(3) = '03:00'\n *    minutesToDuration(45) = '45:00'\n *\n * @param givenMinutes\n *    the number of minutes in the duration\n * @returns {string}\n *    the given minutes formatted as 'mm:00'\n */\n\nexport function minutesToDuration(givenMinutes) {\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\n\nexport function secondsToDuration(givenSeconds) {\n  const minutes = Math.floor(givenSeconds % 3600 / 60).toString().padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60).toString().padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}","map":{"version":3,"sources":["C:/Users/embra/Project_Pomodoro_Timer_Qualified_1/src/utils/class-names/index.js"],"names":["classNames","classNameToBoolean","Object","entries","reduce","classes","className","value","concat","undefined","filter","join","minutesToDuration","givenMinutes","minutes","Math","floor","toString","padStart","secondsToDuration","givenSeconds","seconds","round"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,UAAT,CAAoBC,kBAApB,EAAwC;AACrD,SAAOC,MAAM,CAACC,OAAP,CAAeF,kBAAf,EACJG,MADI,CAEH,CAACC,OAAD,EAAU,CAACC,SAAD,EAAYC,KAAZ,CAAV,KACEF,OAAO,CAACG,MAAR,CAAeD,KAAK,GAAGD,SAAH,GAAeG,SAAnC,CAHC,EAIH,EAJG,EAMJC,MANI,CAMIJ,SAAD,IAAeA,SAAS,KAAKG,SANhC,EAOJE,IAPI,CAOC,GAPD,CAAP;AAQD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,iBAAT,CAA2BC,YAA3B,EAAyC;AAC9C,QAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWH,YAAX,EAAyBI,QAAzB,GAAoCC,QAApC,CAA6C,CAA7C,EAAgD,GAAhD,CAAhB;AACA,SAAQ,GAAEJ,OAAQ,KAAlB;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASK,iBAAT,CAA2BC,YAA3B,EAAyC;AAC9C,QAAMN,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAYI,YAAY,GAAG,IAAhB,GAAwB,EAAnC,EACbH,QADa,GAEbC,QAFa,CAEJ,CAFI,EAED,GAFC,CAAhB;AAGA,QAAMG,OAAO,GAAGN,IAAI,CAACO,KAAL,CAAWF,YAAY,GAAG,EAA1B,EACbH,QADa,GAEbC,QAFa,CAEJ,CAFI,EAED,GAFC,CAAhB;AAGA,SAAQ,GAAEJ,OAAQ,IAAGO,OAAQ,EAA7B;AACD","sourcesContent":["/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n\n/**\n * Formats a number of minutes as 'mm:00'.\n *\n * For example,\n *    minutesToDuration(3) = '03:00'\n *    minutesToDuration(45) = '45:00'\n *\n * @param givenMinutes\n *    the number of minutes in the duration\n * @returns {string}\n *    the given minutes formatted as 'mm:00'\n */\n\nexport function minutesToDuration(givenMinutes) {\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\n\nexport function secondsToDuration(givenSeconds) {\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60)\n    .toString()\n    .padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}\n"]},"metadata":{},"sourceType":"module"}