{"ast":null,"code":"/**\r\n * Formats a number of minutes as 'mm:00'.\r\n *\r\n * For example,\r\n *    minutesToDuration(3) = '03:00'\r\n *    minutesToDuration(45) = '45:00'\r\n *\r\n * @param givenMinutes\r\n *    the number of minutes in the duration\r\n * @returns {string}\r\n *    the given minutes formatted as 'mm:00'\r\n */export function minutesToDuration(givenMinutes){var minutes=Math.floor(givenMinutes).toString().padStart(2,\"0\");return\"\".concat(minutes,\":00\");}/**\r\n * Formats a number of seconds as 'mm:ss'.\r\n *\r\n * For example,\r\n *    secondsToDuration(305) = '05:05'\r\n *    secondsToDuration(930) = '15:30'\r\n *\r\n * @param givenSeconds\r\n *    the number of seconds in the duration\r\n * @returns {string}\r\n *    the given seconds formatted as 'mm:ss'\r\n */export function secondsToDuration(givenSeconds){var minutes=Math.floor(givenSeconds%3600/60).toString().padStart(2,\"0\");var seconds=Math.round(givenSeconds%60).toString().padStart(2,\"0\");return\"\".concat(minutes,\":\").concat(seconds);}","map":{"version":3,"sources":["C:/Users/embra/Pomodoro-Timer-Project/src/utils/duration/index.js"],"names":["minutesToDuration","givenMinutes","minutes","Math","floor","toString","padStart","secondsToDuration","givenSeconds","seconds","round"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA,MAAO,SAASA,CAAAA,iBAAT,CAA2BC,YAA3B,CAAyC,CAC9C,GAAMC,CAAAA,OAAO,CAAGC,IAAI,CAACC,KAAL,CAAWH,YAAX,EAAyBI,QAAzB,GAAoCC,QAApC,CAA6C,CAA7C,CAAgD,GAAhD,CAAhB,CACA,gBAAUJ,OAAV,QACD,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA,MAAO,SAASK,CAAAA,iBAAT,CAA2BC,YAA3B,CAAyC,CAC9C,GAAMN,CAAAA,OAAO,CAAGC,IAAI,CAACC,KAAL,CAAYI,YAAY,CAAG,IAAhB,CAAwB,EAAnC,EACbH,QADa,GAEbC,QAFa,CAEJ,CAFI,CAED,GAFC,CAAhB,CAGA,GAAMG,CAAAA,OAAO,CAAGN,IAAI,CAACO,KAAL,CAAWF,YAAY,CAAG,EAA1B,EACbH,QADa,GAEbC,QAFa,CAEJ,CAFI,CAED,GAFC,CAAhB,CAGA,gBAAUJ,OAAV,aAAqBO,OAArB,EACD","sourcesContent":["/**\r\n * Formats a number of minutes as 'mm:00'.\r\n *\r\n * For example,\r\n *    minutesToDuration(3) = '03:00'\r\n *    minutesToDuration(45) = '45:00'\r\n *\r\n * @param givenMinutes\r\n *    the number of minutes in the duration\r\n * @returns {string}\r\n *    the given minutes formatted as 'mm:00'\r\n */\r\n\r\nexport function minutesToDuration(givenMinutes) {\r\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\r\n  return `${minutes}:00`;\r\n}\r\n\r\n/**\r\n * Formats a number of seconds as 'mm:ss'.\r\n *\r\n * For example,\r\n *    secondsToDuration(305) = '05:05'\r\n *    secondsToDuration(930) = '15:30'\r\n *\r\n * @param givenSeconds\r\n *    the number of seconds in the duration\r\n * @returns {string}\r\n *    the given seconds formatted as 'mm:ss'\r\n */\r\n\r\nexport function secondsToDuration(givenSeconds) {\r\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\r\n    .toString()\r\n    .padStart(2, \"0\");\r\n  const seconds = Math.round(givenSeconds % 60)\r\n    .toString()\r\n    .padStart(2, \"0\");\r\n  return `${minutes}:${seconds}`;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}