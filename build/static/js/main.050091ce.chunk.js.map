{"version":3,"sources":["utils/duration/index.js","pomodoro/Pomodoro.js","utils/class-names/index.js","utils/useInterval/index.js","App.js","index.js"],"names":["minutesToDuration","givenMinutes","minutes","Math","floor","toString","padStart","nextTick","prevState","timeRemaining","max","Pomodoro","classNameToBoolean","useState","isTimerRunning","setIsTimerRunning","session","setSession","focusDuration","setFocusDuration","breakDuration","setBreakDuration","progressBarTimer","focusDurationInSeconds","breakDurationInSeconds","label","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","Audio","play","currentSession","nextSession","className","data-testid","onClick","min","type","role","aria-label","title","nextState","prevStateSession","oi","Object","entries","reduce","classes","value","concat","undefined","filter","join","disabled","seconds","remainderSeconds","timerConversion","style","height","aria-valuemin","aria-valuemax","aria-valuenow","width","activeTimer","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.050091ce.chunk.js","sourcesContent":["/**\r\n * Formats a number of minutes as 'mm:00'.\r\n *\r\n * For example,\r\n *    minutesToDuration(3) = '03:00'\r\n *    minutesToDuration(45) = '45:00'\r\n *\r\n * @param givenMinutes\r\n *    the number of minutes in the duration\r\n * @returns {string}\r\n *    the given minutes formatted as 'mm:00'\r\n */\r\n\r\nexport function minutesToDuration(givenMinutes) {\r\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\r\n  return `${minutes}:00`;\r\n}\r\n\r\n/**\r\n * Formats a number of seconds as 'mm:ss'.\r\n *\r\n * For example,\r\n *    secondsToDuration(305) = '05:05'\r\n *    secondsToDuration(930) = '15:30'\r\n *\r\n * @param givenSeconds\r\n *    the number of seconds in the duration\r\n * @returns {string}\r\n *    the given seconds formatted as 'mm:ss'\r\n */\r\n\r\nexport function secondsToDuration(givenSeconds) {\r\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\r\n    .toString()\r\n    .padStart(2, \"0\");\r\n  const seconds = Math.round(givenSeconds % 60)\r\n    .toString()\r\n    .padStart(2, \"0\");\r\n  return `${minutes}:${seconds}`;\r\n}\r\n","import \"./Pomodoro.css\";\r\nimport React, { useState } from \"react\";\r\nimport classNames from \"../utils/class-names\";\r\nimport useInterval from \"../utils/useInterval\";\r\nimport { minutesToDuration } from \"../utils/duration\";\r\n\r\n// These functions are defined outside of the component to insure they do not have access to state\r\n// and are, therefore more likely to be pure.\r\n\r\n/**\r\n * Update the session state with new state after each tick of the interval.\r\n * @param prevState\r\n *  the previous session state\r\n * @returns\r\n *  new session state with timing information updated.\r\n */\r\nfunction nextTick(prevState) {\r\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);;\r\n  return {\r\n    ...prevState,\r\n    timeRemaining,\r\n  };\r\n}\r\n\r\n/**\r\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\r\n * @param focusDuration\r\n *    the current focus duration\r\n * @param breakDuration\r\n *    the current break duration\r\n * @returns\r\n *  function to update the session state.\r\n */\r\n\r\nfunction nextSession(focusDuration, breakDuration) {\r\n  /**\r\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\r\n   */\r\n  return (currentSession) => {\r\n    if (currentSession.label === \"Focusing\") {\r\n      return {\r\n        label: \"On Break\",\r\n        timeRemaining: breakDuration * 60,\r\n      };\r\n    }\r\n    return {\r\n      label: \"Focusing\",\r\n      timeRemaining: focusDuration * 60,\r\n    };\r\n  };\r\n}\r\n\r\nfunction timerConversion(seconds) {\r\n  const minutes = Math.floor(seconds / 60);\r\n  const remainderSeconds = seconds % 60;\r\n  return `${minutes}:${remainderSeconds < 10 ? '0' : ''}${remainderSeconds}`;\r\n  }\r\n\r\nfunction Pomodoro() {\r\n  // Timer starts out paused\r\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\r\n  // The current session - null where there is no session running\r\n  const [session, setSession] = useState(null);\r\n\r\n  // ToDo: Allow the user to adjust the focus and break duration.\r\n  const [focusDuration, setFocusDuration] = useState(25);\r\n  const [breakDuration, setBreakDuration] = useState(5);\r\n  \r\n  const handleFocusDurationIncrease = () => setFocusDuration(focusDuration => Math.max(5, Math.min((focusDuration) + 5, 60)));\r\n  const handleFocusDurationDecrease = () => setFocusDuration(focusDuration => Math.max(5, Math.min((focusDuration) - 5, 60)));\r\n\r\n  const handleBreakDurationIncrease = () => setBreakDuration(breakDuration => Math.max(1, Math.min((breakDuration) + 1, 15)));\r\n  const handleBreakDurationDecrease = () => setBreakDuration(breakDuration => Math.max(1, Math.min((breakDuration) - 1, 15)));\r\n  /**\r\n   * Custom hook that invokes the callback function every second\r\n   *\r\n   * NOTE: You will not need to make changes to the callback function\r\n   */\r\n  useInterval(() => {\r\n      if (session.timeRemaining === 0) {\r\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\r\n        return setSession(nextSession(focusDuration, breakDuration));\r\n      }\r\n      return setSession(nextTick);\r\n    },\r\n    isTimerRunning ? 1000 : null\r\n  );\r\n\r\n  /**\r\n   * Called whenever the play/pause button is clicked.\r\n   */\r\n  function playPause() {\r\n    setIsTimerRunning((prevState) => {\r\n      const nextState = !prevState;\r\n      if (nextState) {\r\n        setSession((prevStateSession) => {\r\n          // If the timer is starting and the previous session is null,\r\n          // start a focusing session.\r\n          if (prevStateSession === null) {\r\n            return {\r\n              label: \"Focusing\",\r\n              timeRemaining: focusDuration * 60,\r\n            };\r\n          }\r\n          return prevStateSession;\r\n        });\r\n      }\r\n      return nextState;\r\n    });\r\n  }\r\n\r\n  function stop() {\r\n    return setIsTimerRunning(() => setSession(null));\r\n  }\r\n\r\n  function sessionTitle() {\r\n    if (session?.label === \"Focusing\" ) {\r\n    return ` for ${minutesToDuration(focusDuration)} minutes`;\r\n  }\r\n    if (session?.label === \"On Break\") {\r\n      return ` for ${minutesToDuration(breakDuration)} minutes`;\r\n    } \r\n  }\r\n\r\n  function progressBarTimer() {\r\n    const focusDurationInSeconds = focusDuration * 60;\r\n    const breakDurationInSeconds = breakDuration * 60;\r\n    if (isTimerRunning === true && session?.label === \"Focusing\") {\r\n      return ((focusDurationInSeconds - session?.timeRemaining) / focusDurationInSeconds * 100);\r\n    }\r\n    if (isTimerRunning === true && session?.label === \"On Break\") {\r\n      return ((breakDurationInSeconds - session?.timeRemaining) / breakDurationInSeconds * 100);\r\n    }\r\n    return 0;\r\n  }\r\n  \r\n  function activeTimer() {\r\n    if (session !== null)\r\n      return (\r\n      <span className=\"timer-toggle\">\r\n      <div>\r\n      {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\r\n      <div className=\"row mb-2\">\r\n        <div className=\"col\">\r\n          {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\r\n          <h2 data-testid=\"session-title\">\r\n            {session?.label}{sessionTitle()}\r\n          </h2>\r\n          {/* TODO: Update message below correctly format the time remaining in the current session */}\r\n          <p className=\"lead\" data-testid=\"session-sub-title\">\r\n            {timerConversion(session?.timeRemaining)} remaining\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <div className=\"row mb-2\">\r\n        <div className=\"col\">\r\n          <div className=\"progress\" style={{ height: \"20px\" }}>\r\n            <div\r\n              className=\"progress-bar\"\r\n              role=\"progressbar\"\r\n              aria-valuemin=\"0\"\r\n              aria-valuemax=\"100\"\r\n              aria-valuenow= {progressBarTimer()}  // TODO: Increase aria-valuenow as elapsed time increases\r\n              style={{ width:`${progressBarTimer()}%` }} // TODO: Increase width % as elapsed time increases\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    </span>\r\n      );\r\n  }\r\n\r\n  return (\r\n    <div className=\"pomodoro\">\r\n      <div className=\"row\">\r\n        <div className=\"col\">\r\n          <div className=\"input-group input-group-lg mb-2\">\r\n            <span className=\"input-group-text\" data-testid=\"duration-focus\">\r\n              {/* TODO: Update this text to display the current focus session duration */}\r\n              <span className=\"dur-text\">Focus Duration: {minutesToDuration(focusDuration)}</span>\r\n            </span>\r\n            <div className=\"input-group-append\">\r\n              {/* TODO: Implement decreasing focus duration and disable during a focus or break session */}\r\n              <button onClick = {handleFocusDurationDecrease}\r\n                type=\"button\"\r\n                className=\"btn btn-secondary\"\r\n                data-testid=\"decrease-focus\"\r\n              >\r\n                <span className=\"oi oi-minus\" />\r\n              </button>\r\n              {/* TODO: Implement increasing focus duration  and disable during a focus or break session */}\r\n              <button onClick = {handleFocusDurationIncrease}\r\n                type=\"button\"\r\n                className=\"btn btn-secondary\"\r\n                data-testid=\"increase-focus\"\r\n              >\r\n                <span className=\"oi oi-plus\" />\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col\">\r\n          <div className=\"float-right\">\r\n            <div className=\"input-group input-group-lg mb-2\">\r\n              <span className=\"input-group-text\" data-testid=\"duration-break\">\r\n                {/* TODO: Update this text to display the current break session duration */}\r\n                <span className=\"dur-text\">Break Duration: {minutesToDuration(breakDuration)}</span>\r\n              </span>\r\n              <div className=\"input-group-append\">\r\n                {/* TODO: Implement decreasing break duration and disable during a focus or break session*/}\r\n                <button onClick = {handleBreakDurationDecrease}\r\n                  type=\"button\"\r\n                  className=\"btn btn-secondary\"\r\n                  data-testid=\"decrease-break\"\r\n                >\r\n                  <span className=\"oi oi-minus\" />\r\n                </button>\r\n                {/* TODO: Implement increasing break duration and disable during a focus or break session*/}\r\n                <button onClick = {handleBreakDurationIncrease}\r\n                  type=\"button\"\r\n                  className=\"btn btn-secondary\"\r\n                  data-testid=\"increase-break\"\r\n                >\r\n                  <span className=\"oi oi-plus\" />\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col\">\r\n          <div\r\n            className=\"btn-group btn-group-lg mb-2\"\r\n            role=\"group\"\r\n            aria-label=\"Timer controls\"\r\n          >\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-primary\"\r\n              data-testid=\"play-pause\"\r\n              title=\"Start or pause timer\"\r\n              onClick={playPause}\r\n            >\r\n              <span\r\n                className={classNames({\r\n                  oi: true,\r\n                  \"oi-media-play\": !isTimerRunning,\r\n                  \"oi-media-pause\": isTimerRunning,\r\n                })}\r\n              />\r\n            </button>\r\n            {/* TODO: Implement stopping the current focus or break session. and disable the stop button when there is no active session */}\r\n            {/* TODO: Disable the stop button when there is no active session */}\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              data-testid=\"stop\"\r\n              title=\"Stop the session\"\r\n              onClick = {stop}\r\n              disabled={isTimerRunning === true ? false : true}\r\n            >\r\n              <span className=\"oi oi-media-stop\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {activeTimer()}\r\n          </div>\r\n  );\r\n  }\r\n\r\n\r\nexport default Pomodoro;\r\n","/**\r\n * Use this function to dynamically assign the className property of react components.\r\n *\r\n * Usage:\r\n *\r\n *  <span className={classNames({\r\n *               \"oi\": true,\r\n *               \"oi-media-play\": currentState.isPaused,\r\n *               'oi-media-pause': !currentState.isPaused\r\n *             })}/>\r\n *\r\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\r\n *\r\n * @param classNameToBoolean\r\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\r\n * @returns {string}\r\n *    a space delimited string of the class names which have a value of `true`.\r\n */\r\nexport default function classNames(classNameToBoolean) {\r\n  return Object.entries(classNameToBoolean)\r\n    .reduce(\r\n      (classes, [className, value]) =>\r\n        classes.concat(value ? className : undefined),\r\n      []\r\n    )\r\n    .filter((className) => className !== undefined)\r\n    .join(\" \");\r\n}\r\n","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\r\n\r\nimport { useEffect, useRef } from \"react\";\r\n\r\nexport default function useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Pomodoro from \"./pomodoro/Pomodoro\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header container\">\r\n        <h1><b>Pom-0 dor-0 Timer</b></h1>\r\n      </header>\r\n      <div className=\"container\">\r\n        <Pomodoro />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}